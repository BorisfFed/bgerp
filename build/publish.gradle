task publishUpdate(dependsOn: ['touchChanges', 'resetProperties']) {
    mustRunAfter 'buildDoc'
    mustRunAfter 'buildUpdate'
    doFirst {
        def processId = getProcessId()
        def updateFile = fileTree("$projectDir/build/update")
            .matching {include "update_${version}_*.zip"}
            .getSingleFile()
        
        println "Publish remotely"
        
        def sshLogin = "update@bgerp.ru"
        def sshFolder = "/home/update/www/$processId"

        println "Create dir if not exists"
        println "ssh $sshLogin mkdir -p $sshFolder".execute().text
        
        println "Sync doc"
        println "rsync -ru --delete $projectDir/target/doc $sshLogin:$sshFolder".execute().text

        if (updateFile) {
            println "Copy $updateFile"
            println "scp $updateFile $sshLogin:$sshFolder".execute().text
        }

        println "Update links:" 
        println "https://bgerp.ru/update/$processId"
        println "https://bgerp.ru/update/$processId/" + updateFile.getName()
        println "https://bgerp.ru/update/$processId/doc"
    }
}

task publishBuild {
    mustRunAfter 'buildUpdate'
    mustRunAfter 'buildUpdateLib'
    mustRunAfter 'patchChanges'
    mustRunAfter 'rss'
    doFirst {
        publishFile("$projectDir/build/bgerp", "bgerp_${version}_*.zip", true, "bgerp.zip")
        publishFile("$projectDir/build/update", "update_${version}_*.zip", true, null)
        publishFile("$projectDir/build/update_lib", "update_lib_${version}_*.zip", true, null)
        publishFile("$projectDir/build", "changes.txt", false, null)
        publishFile("$projectDir/build", "changes.xml", false, null)

        def targetDir = "$projectDir/target"
        def buildNumberFile = "build.number"
        file(targetDir + "/" + buildNumberFile).text = getBuild()
        publishFile(targetDir, buildNumberFile, false, null)
    }
}

def publishFile(String localDir, String mask, boolean versioned, String link) {
    println "Publish $localDir/$mask"

    def localFile = fileTree(dir: localDir, include: mask).getFiles()
    if (!localFile) return
    localFile = localFile[0].getName()
    println "Local: $localFile"

    def sshLogin = 'www@bgerp.org'
    def sshFolder = "/var/ftp/pub/bgerp/$version"

    def remoteFile
    if (versioned) {
        remoteFile = "ssh $sshLogin cd $sshFolder; ls $mask".execute().text.trim()
        println "Remote: $remoteFile"

        if (link) {
            println "Creating symlink $link"
            println "ssh $sshLogin cd $sshFolder; ln -sf ./$remoteFile $link".execute().text
        }

        if (localFile == remoteFile) return
    }

    println "Copy $localFile"
    "scp $localDir/$localFile $sshLogin:$sshFolder".execute()

    if (versioned) {
        println "Move $remoteFile to archive"
        "ssh $sshLogin mv $sshFolder/$remoteFile $sshFolder/archive/$remoteFile".execute()
    }
}

task publishCommit(type: Exec) {
    mustRunAfter 'publishBuild'
    workingDir "$projectDir/build"
    commandLine 'git', 'commit', '*.properties', 'changes.txt', 'changes.*.txt', '-m PUBLISH ' + getBuild()
}
