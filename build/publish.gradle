task publishUpdate(dependsOn: ['touchChanges', 'resetProperties']) {
    mustRunAfter 'buildDoc'
    mustRunAfter 'buildUpdate'
    doFirst {
        def processId = getProcessId()

        println "Publish remotely"

        def sshLogin = "update@bgerp.org"
        def sshFolder = "/home/update/www/$processId"

        println "Create dir if not exists"
        println "ssh $sshLogin mkdir -p $sshFolder".execute().text
        
        def updateFile = publishUpdateFile(sshLogin, sshFolder, "update")
        def updateLibFile = publishUpdateFile(sshLogin, sshFolder, "update_lib")

        def docDir = file("$projectDir/target/doc")
        if (docDir.exists()) { 
            println "Sync doc"
            println "rsync -ru --delete $projectDir/target/doc $sshLogin:$sshFolder".execute().text
        }

        println "Update links:" 
        println "https://bgerp.ru/update/$processId"
        if (updateFile)
            println "https://bgerp.ru/update/$processId/" + updateFile.getName()
        if (updateLibFile)
            println "https://bgerp.ru/update/$processId/" + updateLibFile.getName()
        if (docDir.exists())
            println "https://bgerp.ru/update/$processId/doc"
    }
}

def publishUpdateFile(String sshLogin, String sshFolder, String name) {
    def mask = "${name}_${version}_*.zip"
    def files = fileTree("$projectDir/build/$name")
            .matching {include mask}
    if (!files.isEmpty()) {
        def file = files.getSingleFile()
        println "Remove existing $mask"
        println "ssh $sshLogin rm $sshFolder/$mask".execute().text
        println "Copy $file"
        println "scp $file $sshLogin:$sshFolder".execute().text
        return file
    }
    return null
}

task publishBuild {
    mustRunAfter 'buildUpdate'
    mustRunAfter 'buildUpdateLib'
    mustRunAfter 'patchChanges'
    mustRunAfter 'rss'
    doFirst {
        publishFile("$projectDir/build/bgerp", "bgerp_${version}_*.zip", true, "bgerp.zip")
        publishFile("$projectDir/build/update", "update_${version}_*.zip", true, null)
        publishFile("$projectDir/build/update_lib", "update_lib_${version}_*.zip", true, null)
        publishFile("$projectDir/build", "changes.txt", false, null)
        publishFile("$projectDir/build", "changes.xml", false, null)

        def targetDir = "$projectDir/target"
        def buildNumberFile = "build.number"
        file(targetDir + "/" + buildNumberFile).text = getBuild()
        publishFile(targetDir, buildNumberFile, false, null)
    }
}

def publishFile(String localDir, String mask, boolean versioned, String link) {
    println "Publish $localDir/$mask"

    def localFile = fileTree(dir: localDir, include: mask).getFiles()
    if (!localFile) return
    localFile = localFile[0].getName()
    println "Local: $localFile"

    def sshLogin = 'www@bgerp.org'
    def sshFolder = "/var/ftp/pub/bgerp/$version"

    def remoteFile
    if (versioned) {
        remoteFile = "ssh $sshLogin cd $sshFolder; ls $mask".execute().text.trim()
        println "Remote: $remoteFile"

        if (localFile == remoteFile) { 
            createSymlink(sshLogin, sshFolder, link, remoteFile)
            return
        }
    }

    println "Copy $localFile"
    "scp $localDir/$localFile $sshLogin:$sshFolder".execute()

    if (versioned) {
        println "Move $remoteFile to archive"
        "ssh $sshLogin mv $sshFolder/$remoteFile $sshFolder/archive/$remoteFile".execute()
        createSymlink(sshLogin, sshFolder, link, localFile)
    }
}

def createSymlink(String sshLogin, String sshFolder, String link, String target) {
    if (link) {
        println "Creating symlink $link"
        println "ssh $sshLogin cd $sshFolder; ln -sf ./$target $link".execute().text
    }
}

task publishCommit(type: Exec) {
    mustRunAfter 'publishBuild'
    workingDir "$projectDir/build"
    commandLine 'git', 'commit', '*.properties', 'changes.txt', 'changes.*.txt', '-m PUBLISH ' + getBuild()
}
